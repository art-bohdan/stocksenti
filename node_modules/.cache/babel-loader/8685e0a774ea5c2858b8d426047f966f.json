{"ast":null,"code":"import { stockAPI } from \"../api/Api\";\nconst SET_STOCKS = 'SET_STOCKS';\nlet initialState = {\n  entityConfigList: [{\n    \"instruments\": '',\n    \"timestamp\": null,\n    \"stocksymbols\": \"\",\n    \"articlesearchphrases\": \"\",\n    \"twittersearchphrases\": \"\",\n    \"id\": null,\n    instrumentphoto: null\n  }]\n};\n\nconst stockReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_STOCKS:\n      {\n        return { //take old users and will add new users who come with action\n          ...state,\n          entityConfigList: action.entityConfigListAPI\n        };\n      }\n\n    default:\n      return state;\n  }\n}; //action creator\n\n\nexport const setStocks = entityConfigListAPI => ({\n  type: SET_STOCKS,\n  entityConfigListAPI\n}); // thunk creator\n\nexport const requestStocks = () => {\n  return dispatch => {\n    stockAPI.entitiesConfigurationController().then(response => dispatch(setStocks(response.data)));\n  };\n};\nexport default stockReducer;","map":{"version":3,"sources":["/Users/bohdanartiukhov/Desktop/frontend/stocksentifrontend/src/redux/stockReducer.ts"],"names":["stockAPI","SET_STOCKS","initialState","entityConfigList","instrumentphoto","stockReducer","state","action","type","entityConfigListAPI","setStocks","requestStocks","dispatch","entitiesConfigurationController","then","response","data"],"mappings":"AAAA,SAAQA,QAAR,QAAuB,YAAvB;AAGA,MAAMC,UAAU,GAAG,YAAnB;AAEA,IAAIC,YAAY,GAAG;AACjBC,EAAAA,gBAAgB,EAAC,CACjB;AACI,mBAAe,EADnB;AAEI,iBAAa,IAFjB;AAGI,oBAAgB,EAHpB;AAII,4BAAwB,EAJ5B;AAKI,4BAAwB,EAL5B;AAMI,UAAM,IANV;AAOIC,IAAAA,eAAe,EAAE;AAPrB,GADiB;AADA,CAAnB;;AAeA,MAAMC,YAAY,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAuD;AACxE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKP,UAAL;AAAiB;AACf,eAAO,EACL;AACA,aAAGK,KAFE;AAGLH,UAAAA,gBAAgB,EAAEI,MAAM,CAACE;AAHpB,SAAP;AAKD;;AACD;AACE,aAAOH,KAAP;AATJ;AAWD,CAZH,C,CAeA;;;AACA,OAAO,MAAMI,SAAS,GAAID,mBAAD,KACvB;AAACD,EAAAA,IAAI,EAAEP,UAAP;AAAmBQ,EAAAA;AAAnB,CADuB,CAAlB,C,CAGP;;AAEA,OAAO,MAAME,aAAa,GAAG,MAAM;AACjC,SAAQC,QAAD,IAAkB;AACvBZ,IAAAA,QAAQ,CAACa,+BAAT,GACGC,IADH,CACQC,QAAQ,IAAIH,QAAQ,CAACF,SAAS,CAACK,QAAQ,CAACC,IAAV,CAAV,CAD5B;AAGD,GAJD;AAKD,CANM;AAQP,eAAeX,YAAf","sourcesContent":["import {stockAPI} from \"../api/Api\";\nimport {EntityConfigListType} from \"../type/types\";\n\nconst SET_STOCKS = 'SET_STOCKS'\n\nlet initialState = {\n  entityConfigList:[\n  {\n      \"instruments\": '',\n      \"timestamp\": null,\n      \"stocksymbols\": \"\",\n      \"articlesearchphrases\": \"\",\n      \"twittersearchphrases\": \"\",\n      \"id\": null,\n      instrumentphoto: null,\n  }]as Array <EntityConfigListType>\n};\n\nexport type InitialStateType = typeof initialState;\n\nconst stockReducer = (state = initialState, action:any):InitialStateType => {\n    switch (action.type) {\n      case SET_STOCKS: {\n        return {\n          //take old users and will add new users who come with action\n          ...state,\n          entityConfigList: action.entityConfigListAPI,\n        }\n      }\n      default:\n        return state;\n    }\n  }\n;\n\n//action creator\nexport const setStocks = (entityConfigListAPI:any) => (\n  {type: SET_STOCKS, entityConfigListAPI});\n\n// thunk creator\n\nexport const requestStocks = () => {\n  return (dispatch:any) => {\n    stockAPI.entitiesConfigurationController()\n      .then(response => dispatch(setStocks(response.data))\n    )\n  };\n};\n\nexport default stockReducer;\n"]},"metadata":{},"sourceType":"module"}