{"ast":null,"code":"import { googleNewsController } from \"../api/Api\";\nimport moment from \"moment\";\nconst SET_DAY_DATE = 'SET_DAY_DATE';\nconst SET_YEAR_DATE = 'SET_YEAR_DATE';\nconst SET_MONTH_DATE = 'SET_MONTH_DATE';\nconst SET_WEEK_DATE = 'SET_WEEK_DATE';\nlet initialState = {\n  googleInfo: [{\n    \"id\": undefined,\n    \"instrument\": null,\n    \"createddate\": null,\n    \"titlesentiment\": null,\n    \"link\": null,\n    \"title\": null,\n    \"articleproviderlogolink\": null,\n    \"searchphrase\": null,\n    \"articlesentiment\": null,\n    \"articlesentimentscore\": null,\n    \"relatedsentenceswithsentiments\": null,\n    \"articleprovider\": null\n  }]\n};\n\nconst googleNewsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_DAY_DATE:\n      {\n        return { ...state,\n          googleInfo: action.getDayData\n        };\n      }\n\n    case SET_WEEK_DATE:\n      {\n        return { ...state,\n          googleInfo: action.getWeekData\n        };\n      }\n\n    case SET_MONTH_DATE:\n      {\n        return { ...state,\n          googleInfo: action.getMonthData\n        };\n      }\n\n    case SET_YEAR_DATE:\n      {\n        return { ...state,\n          googleInfo: action.getYearData\n        };\n      }\n\n    default:\n      return state;\n  }\n}; //action type\n\n\n//action creator\nexport const setGoogleNewsDayData = getDayData => ({\n  type: SET_DAY_DATE,\n  getDayData\n});\nexport const setGoogleNewsWeekData = getWeekData => ({\n  type: SET_WEEK_DATE,\n  getWeekData\n});\nexport const setGoogleNewsMonthData = getMonthData => ({\n  type: SET_MONTH_DATE,\n  getMonthData\n});\nexport const setGoogleNewsYearData = getYearData => ({\n  type: SET_YEAR_DATE,\n  getYearData\n}); // thunk creator\n\nexport const requestGoogleNewsDayData = getDayData => {\n  return async dispatch => {\n    let response = await googleNewsController.googleNewsStream(getDayData);\n    dispatch(setGoogleNewsDayData(response.data));\n  };\n};\nexport const requestGoogleNewsWeekData = getWeekData => {\n  return async dispatch => {\n    const currentDate = new Date();\n    let DayOfWeekAgo = currentDate.setDate(currentDate.getDate() - 7);\n    let dateTime = moment(DayOfWeekAgo).format('YYYY-MM-DD');\n    let response = await googleNewsController.googleNewsStream(getWeekData, dateTime);\n    dispatch(setGoogleNewsWeekData(response.data));\n  };\n};\nexport const requestGoogleNewsMonthData = getMonthData => {\n  return async dispatch => {\n    let currentDate = new Date();\n    let dayOfMonth = currentDate.setMonth(currentDate.getMonth() - 1);\n    let dateTime = moment(dayOfMonth).format('YYYY-MM-DD');\n    let response = await googleNewsController.googleNewsStream(getMonthData, dateTime);\n    dispatch(setGoogleNewsMonthData(response.data));\n  };\n};\nexport const requestGoogleNewsYearData = getYearData => {\n  return async dispatch => {\n    let currentDate = new Date();\n    let currentYear = currentDate.getFullYear();\n    let dateTime = moment(currentYear).format('YYYY-MM-DD');\n    let response = await googleNewsController.googleNewsStream(getYearData, dateTime);\n    dispatch(setGoogleNewsYearData(response.data));\n  };\n};\nexport default googleNewsReducer;","map":{"version":3,"sources":["/Users/bohdanartiukhov/Desktop/frontend/stocksentifrontend/src/redux/GoogleNewsReducer.ts"],"names":["googleNewsController","moment","SET_DAY_DATE","SET_YEAR_DATE","SET_MONTH_DATE","SET_WEEK_DATE","initialState","googleInfo","undefined","googleNewsReducer","state","action","type","getDayData","getWeekData","getMonthData","getYearData","setGoogleNewsDayData","setGoogleNewsWeekData","setGoogleNewsMonthData","setGoogleNewsYearData","requestGoogleNewsDayData","dispatch","response","googleNewsStream","data","requestGoogleNewsWeekData","currentDate","Date","DayOfWeekAgo","setDate","getDate","dateTime","format","requestGoogleNewsMonthData","dayOfMonth","setMonth","getMonth","requestGoogleNewsYearData","currentYear","getFullYear"],"mappings":"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","sourcesContent":["import {googleNewsController} from \"../api/Api\";\nimport moment from \"moment\";\nimport {GoogleNewsType} from \"../type/types\";\nimport {ThunkAction} from \"redux-thunk\";\nimport {AppStateType} from \"./ReduxStore\";\nconst SET_DAY_DATE = 'SET_DAY_DATE';\nconst SET_YEAR_DATE = 'SET_YEAR_DATE';\nconst SET_MONTH_DATE = 'SET_MONTH_DATE';\nconst SET_WEEK_DATE = 'SET_WEEK_DATE';\n\nlet initialState = {\n    googleInfo: [{\n        \"id\": undefined,\n        \"instrument\": null,\n        \"createddate\": null,\n        \"titlesentiment\": null,\n        \"link\": null,\n        \"title\": null,\n        \"articleproviderlogolink\": null,\n        \"searchphrase\": null,\n        \"articlesentiment\": null,\n        \"articlesentimentscore\": null,\n        \"relatedsentenceswithsentiments\": null,\n        \"articleprovider\": null\n    }] as Array <GoogleNewsType>\n};\n\nexport type InitialState = typeof initialState;\n\nconst googleNewsReducer = (state = initialState, action:ActionsType)  => {\n    switch (action.type) {\n      case SET_DAY_DATE: {\n        return {\n          ...state,\n          googleInfo: action.getDayData,\n        }\n      }\n      case SET_WEEK_DATE: {\n        return {\n          ...state,\n          googleInfo: action.getWeekData,\n        }\n      }\n      case SET_MONTH_DATE: {\n        return {\n          ...state,\n          googleInfo: action.getMonthData,\n        }\n      }\n      case SET_YEAR_DATE: {\n        return {\n          ...state,\n          googleInfo: action.getYearData,\n        }\n      }\n      default:\n        return state;\n    }\n  };\n\n//action type\ntype ActionsType = setGoogleNewsDayDataActionType | setGoogleNewsWeekDataActionType | setGoogleNewsMonthDataActionType | setGoogleNewsYearDataActionType\ntype setGoogleNewsDayDataActionType ={\n    type: typeof SET_DAY_DATE\n    getDayData: InitialState\n}\ntype setGoogleNewsWeekDataActionType ={\n    type: typeof SET_WEEK_DATE\n    getWeekData: InitialState\n}\ntype setGoogleNewsMonthDataActionType ={\n    type: typeof SET_MONTH_DATE\n    getMonthData: InitialState\n}\ntype setGoogleNewsYearDataActionType ={\n    type: typeof SET_YEAR_DATE\n    getYearData: InitialState\n}\n\n//action creator\nexport const setGoogleNewsDayData = (getDayData:InitialState): setGoogleNewsDayDataActionType => ({type: SET_DAY_DATE, getDayData});\nexport const setGoogleNewsWeekData = (getWeekData:InitialState): setGoogleNewsWeekDataActionType => ({type: SET_WEEK_DATE, getWeekData});\nexport const setGoogleNewsMonthData = (getMonthData:InitialState):setGoogleNewsMonthDataActionType => ({type: SET_MONTH_DATE, getMonthData});\nexport const setGoogleNewsYearData = (getYearData:InitialState): setGoogleNewsYearDataActionType => ({type: SET_YEAR_DATE, getYearData});\n\n// thunk creator\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\n\nexport const requestGoogleNewsDayData = (getDayData:InitialState):ThunkType => {\n  return async (dispatch) => {\n    let response = await googleNewsController.googleNewsStream(getDayData);\n      dispatch(setGoogleNewsDayData(response.data));\n  };\n};\n\nexport const requestGoogleNewsWeekData = (getWeekData:InitialState):ThunkType => {\n  return async (dispatch) => {\n    const currentDate = new Date();\n    let DayOfWeekAgo = currentDate.setDate(currentDate.getDate() - 7);\n    let dateTime = moment(DayOfWeekAgo).format('YYYY-MM-DD');\n    let response = await googleNewsController.googleNewsStream(getWeekData, dateTime);\n    dispatch(setGoogleNewsWeekData(response.data));\n  };\n};\n\nexport const requestGoogleNewsMonthData = (getMonthData:InitialState):ThunkType => {\n  return async (dispatch) => {\n    let currentDate = new Date();\n    let dayOfMonth = currentDate.setMonth(currentDate.getMonth() - 1);\n    let dateTime = moment(dayOfMonth).format('YYYY-MM-DD');\n    let response = await googleNewsController.googleNewsStream(getMonthData, dateTime);\n      dispatch(setGoogleNewsMonthData(response.data));\n  };\n};\n\nexport const requestGoogleNewsYearData = (getYearData:InitialState):ThunkType => {\n  return async (dispatch) => {\n    let currentDate = new Date();\n    let currentYear = currentDate.getFullYear();\n    let dateTime = moment(currentYear).format('YYYY-MM-DD');\n    let response = await googleNewsController.googleNewsStream(getYearData, dateTime);\n      dispatch(setGoogleNewsYearData(response.data));\n  };\n};\n\nexport default googleNewsReducer;\n"]},"metadata":{},"sourceType":"module"}